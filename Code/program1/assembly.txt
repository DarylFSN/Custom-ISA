xor r0 r0	// r0 = r0 ^ r0 = 0 (count = 0), address 0x000

LOOP:		// Assume label LOOP is at address 0x001
xor r1 r1	// r1 = r1 ^ r1 = 0
xor r2 r2	// r2 = r2 ^ r2 = 0
xor r3 r3	// r3 = r3 ^ r3 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
xor r5 r5	// r5 = r5 ^ r5 = 0
xor r6 r6	// r6 = r6 ^ r6 = 0

lut #0	// r7 = 1
add r1 r7	// r1 = 1
lut #8	// r7 = 0x0 = &mem[0]
add r4 r7	// r4 = r4 + r7 = 0 + &mem[0] = &mem[0]
add r4 r0	// r4 = r4 + r0 = &mem[0] + count = &mem[0 + count]
lb r2 r4	// r2 = mem[0 + count] = LSW

lut #2	// r7 = 4
add r5 r7	// r5 = r5 + r7 = 0 + r7 = 4

// Calculating p8
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 4 = LSW >> 4
and r4 r1	// r4 = r4 & 1 = LSW[4]
add r6 r4	// r6 = r6 + r4 = 0 + r4 = r4 = LSW[4]

add r5 r1	// r5 = r5 + r1 = 4 + 1 = 5
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 5 = LSW >> 5
and r4 r1	// r4 = r4 & 1 = LSW[5]
xor r6 r4	// r6 = r6 ^  r4 = ^LSW[5:4]

add r5 r1	// r5 = r5 + r1 = 5 + 1 = 6
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 6 = LSW >> 6
and r4 r1	// r4 = r4 & 1 = LSW[6]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[6:4]

add r5 r1	// r5 = r5 + r1 = 6 + 1 = 7
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 7 = LSW >> 7
and r4 r1	// r4 = r4 & 1 = LSW[7]
xor r6 r4	// r6 = r6 ^  r4 = ^LSW[7:4]

lut #8	// r7 = 0x0 = &mem[0]
add r3 r1	// r3 = r3 + r1 = 0 + 1 = 1
add r3 r7	// r3 = r3 + r7 = 1 + 0x0 = 0x1 = &mem[1]
add r3 r0	// r3 = r3 + r0 = &mem[1] + count = &mem[1 + count]
lb r3 r3	// r3 = mem[1 + count] = MSW

xor r4 r4	// r4 = r4 ^ r4 = 0
xor r5 r5	// r5 = r5 ^ r5 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
and r4 r1	// r4 = r4 & 1 = MSW[0]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[7:4] ^ MSW[0]

add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = MSW >> 1
and r4 r1	// r4 = r4 & 1 = MSW[1]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[7:4] ^ ^MSW[1:0]

add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = MSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[7:4] ^ ^MSW[2:0] = p8

// Storing p8 in mem[68]
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #3	// r7 = 8
add r4 r7	// r4 = r4 + r7 = 30 + 8 = 38
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 38 = 0x44 = &mem[68]
sb r6 r4	// mem[68] = r6 = p8

// Constructing MSW_out
add r5 r5	// r5 = r5 + r5 = 2 + 2 = 4
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 4 = LSW >> 4
and r4 r1	// r4 = r4 & 1 = LSW[4]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[4]
add r6 r4	// r6 = { LSW[4], p8 }

add r5 r1	// r5 = r5 + r1 = 4 + 1 = 5
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 5 = LSW >> 5
and r4 r1	// r4 = r4 & 1 = LSW[5]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[5]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[5]
add r6 r4	// r6 = { LSW[5:4], p8 }

add r5 r1	// r5 = r5 + r1 = 5 + 1 = 6
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 6 = LSW >> 6
and r4 r1	// r4 = r4 & 1 = LSW[6]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[6]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[6]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[6]
add r6 r4	// r6 = { LSW[6:4], p8 }

add r5 r1	// r5 = r5 + r1 = 6 + 1 = 7
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 7 = LSW >> 7
and r4 r1	// r4 = r4 & 1 = LSW[7]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[7]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[7]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[7]
add r4 r4	// r4 = r4 + r4 = 16 * LSW[7]
add r6 r4	// r6 = { LSW[7:4], p8 }

xor r4 r4	// r4 = r4 ^ r4 = 0
xor r5 r5	// r5 = r5 ^ r5 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
and r4 r1	// r4 = r4 & 1 = MSW[0]
add r4 r4	// r4 = r4 + r4 = 2 * MSW[0]
add r4 r4	// r4 = r4 + r4 = 4 * MSW[0]
add r4 r4	// r4 = r4 + r4 = 8 * MSW[0]
add r4 r4	// r4 = r4 + r4 = 16 * MSW[0]
add r4 r4	// r4 = r4 + r4 = 32 * MSW[0]
add r6 r4	// r6 = { MSW[0], LSW[7:4], p8 }

add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r3 = r4 >> 1 = MSW >> 1
and r4 r1	// r4 = r4 & 1 = MSW[1]
add r4 r4	// r4 = r4 + r4 = 2 * MSW[1]
add r4 r4	// r4 = r4 + r4 = 4 * MSW[1]
add r4 r4	// r4 = r4 + r4 = 8 * MSW[1]
add r4 r4	// r4 = r4 + r4 = 16 * MSW[1]
add r4 r4	// r4 = r4 + r4 = 32 * MSW[1]
add r4 r4	// r4 = r4 + r4 = 64 * MSW[1]
add r6 r4	// r6 = { MSW[1:0], LSW[7:4], p8 }

add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r3 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = MSW[2]
add r4 r4	// r4 = r4 + r4 = 2 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 4 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 8 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 16 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 32 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 64 * MSW[2]
add r4 r4	// r4 = r4 + r4 = 128 * MSW[2]
add r6 r4	// r6 = { MSW[2:0], LSW[7:4], p8 } = MSW_out

// Storing MSW_out into mem[31 + count]
lut #9	// r7 = 0x1E = &mem[30]
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r0	// r4 = r4 + r0 = count
add r4 r1	// r4 = r4 + r1 = count + 1
add r4 r7	// r4 = r4 + r7 = count + 1 + 0x1E = count + 0x1F = &mem[31 + count]
sb r6 r4	// mem[31 + count] = MSW_out

// Calculating p4
xor r5 r5	// r5 = r5 ^ r5 = 0
xor r6 r6 // r6 = r6 ^ r6 = 0

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = LSW >> 1
and r4 r1	// r4 = r4 & 1 = LSW[1]
add r6 r4	// r6 = r6 + r4 = 0 + r4 = r4 = LSW[1]

add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = LSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[2:1]

add r5 r1	// r5 = r5 + r1 = 2 + 1 = 3
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 3 = LSW >> 3
and r4 r1	// r4 = r4 & 1 = LSW[3]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[3:1]

add r5 r5	// r5 = r5 + r5 = 3 + 3 = 6
add r5 r1	// r5 = r5 + r1 = 6 + 1 = 7
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 7 = LSW >> 7
and r4 r1	// r4 = r4 & 1 = LSW[7]
xor r6 r4	// r6 = r6 ^ r4 = LSW[7] ^ ^LSW[3:1]

xor r5 r5	// r5 = r5 ^ r5 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
and r4 r1	// r4 = r4 & 1 = MSW[0]
xor r6 r4	// r6 = r6 ^ r4 = MSW[0] ^ LSW[7] ^ ^LSW[3:1]

add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = MSW >> 1
and r4 r1	// r4 = r4 & 1 = MSW[1]
xor r6 r4	// r6 = r6 ^ r4 = ^MSW[1:0] ^ LSW[7] ^ ^LSW[3:1]

add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = MSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^MSW[2:0] ^ LSW[7] ^ ^LSW[3:1] = p4

// Storing p4 in mem[64]
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #2	// r7 = 4
add r4 r7	// r4 = r4 + r7 = 30 + 4 = 34
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 34 = 0x40 = &mem[64]
sb r6 r4	// mem[64] = r6 = p4

// Calculating p2
xor r5 r5	// r5 = r5 ^ r5 = 0
xor r6 r6 // r6 = r6 ^ r6 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
and r4 r1	// r4 = r4 & 1 = LSW[0]
add r6 r4	// r6 = r6 + r4 = 0 + r4 = r4 = LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r5 r5	// r5 = r5 + r5 = 1 + 1 = 2
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = LSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[2]
xor r6 r4	// r6 = r6 ^ r4 = LSW[2] ^ LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 2 + 1 = 3
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 3 = LSW >> 3
and r4 r1	// r4 = r4 & 1 = LSW[3]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[3:2] ^ LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 3 + 1 = 4
add r5 r1	// r5 = r5 + r1 = 4 + 1 = 5
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 5 = LSW >> 5
and r4 r1	// r4 = r4 & 1 = LSW[5]
xor r6 r4	// r6 = r6 ^ r4 = LSW[5] ^ ^LSW[3:2] ^ LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 5 + 1 = 6
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 6 = LSW >> 6
and r4 r1	// r4 = r4 & 1 = LSW[6]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[6:5] ^ ^LSW[3:2] ^ LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
xor r5 r5	// r5 = r5 ^ r5 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = MSW >> 1
and r4 r1	// r4 = r4 & 1 = MSW[1]
xor r6 r4	// r6 = r6 ^ r4 = MSW[1] ^LSW[6:5] ^ LSW[3:2] ^ LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = MSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^MSW[2:1] ^LSW[6:5] ^ LSW[3:2] ^ LSW[0] = p2

// Storing p2 in mem[62]
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #1	// r7 = 2
add r4 r7	// r4 = r4 + r7 = 30 + 2 = 32
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 32 = 0x3E = &mem[62]
sb r6 r4	// mem[62] = r6 = p2

// Calculating p1
xor r5 r5	// r5 = r5 ^ r5 = 0
xor r6 r6 // r6 = r6 ^ r6 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
and r4 r1	// r4 = r4 & 1 = LSW[0]
add r6 r4	// r6 = r6 + r4 = 0 + r4 = r4 = LSW[0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = LSW >> 1
and r4 r1	// r4 = r4 & 1 = LSW[1]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[1:0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r5 r1	// r5 = r5 + r1 = 2 + 1 = 3
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 3 = LSW >> 3
and r4 r1	// r4 = r4 & 1 = LSW[3]
xor r6 r4	// r6 = r6 ^ r4 = LSW[3] ^ ^LSW[1:0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 3 + 1 = 4
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 4 = LSW >> 4
and r4 r1	// r4 = r4 & 1 = LSW[4]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[4:3] ^ ^LSW[1:0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 4 + 1 = 5
add r5 r1	// r5 = r5 + r1 = 5 + 1 = 6
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 6 = LSW >> 6
and r4 r1	// r4 = r4 & 1 = LSW[6]
xor r6 r4	// r6 = r6 ^ r4 = LSW[6] ^ ^LSW[4:3] ^ ^LSW[1:0]

xor r4 r4	// r4 = r4 ^ r4 = 0
xor r5 r5	// r5 = r5 ^ r5 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
and r4 r1	// r4 = r4 & 1 = MSW[0]
xor r6 r4	// r6 = r6 ^ r4 = MSW[0] ^ LSW[6] ^ ^LSW[4:3] ^ ^LSW[1:0]

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = MSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[2]
xor r6 r4	// r6 = r6 + r4 = 0 + r4 = r4 = MSW[2] ^ MSW[0] ^ LSW[6] ^ ^LSW[4:3] ^ ^LSW[1:0] = p1

// Storing p1 in mem[61]
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
add r4 r1	// r4 = r4 + r1 = 30 + 1 = 31
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 31 = 0x3D = &mem[61]
sb r6 r4	// mem[61] = r6 = p1

// Calculating p0
xor r5 r5	// r5 = r5 ^ r5 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #1	// r7 = 2
add r4 r7	// r4 = r4 + r7 = 30 + 2 = 32
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 32 = 0x3E = &mem[62]
lb r5 r4	// r5 = mem[62] = p2
xor r6 r5	// r6 = r6 ^ r5 = p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #2	// r7 = 4
add r4 r7	// r4 = r4 + r7 = 30 + 4 = 34
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 34 = 0x40 = &mem[64]
lb r5 r4	// r5 = mem[64] = p4
xor r6 r5	// r6 = r6 ^ r5 = p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #3	// r7 = 8
add r4 r7	// r4 = r4 + r7 = 30 + 8 = 38
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 38 = 0x44 = &mem[68]
lb r5 r4	// r5 = mem[68] = p8
xor r6 r5	// r6 = r6 ^ r5 = p8 ^ p4 ^ p2 ^ p1

xor r5 r5	// r5 = r5 ^ r5 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
and r4 r1	// r4 = r4 & 1 = LSW[0]
xor r6 r4	// r6 = r6 ^ r4 = LSW[0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = LSW >> 1
and r4 r1	// r4 = r4 & 1 = LSW[1]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[1:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = LSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[2:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 2 + 1 = 3
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 3 = LSW >> 3
and r4 r1	// r4 = r4 & 1 = LSW[3]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[3:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 3 + 1 = 4
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 4 = LSW >> 4
and r4 r1	// r4 = r4 & 1 = LSW[4]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[4:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 4 + 1 = 5
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 5 = LSW >> 5
and r4 r1	// r4 = r4 & 1 = LSW[5]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[5:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 5 + 1 = 6
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 6 = LSW >> 6
and r4 r1	// r4 = r4 & 1 = LSW[6]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[6:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 6 + 1 = 7
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 7 = LSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[7]
xor r6 r4	// r6 = r6 ^ r4 = ^LSW[7:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r5 r5	// r5 = r5 ^ r5 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
and r4 r1	// r4 = r4 & 1 = MSW[0]
xor r6 r4	// r6 = r6 ^ r4 = MSW[0] ^ ^LSW[7:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r1 = r4 >> 1 = MSW >> 1
and r4 r1	// r4 = r4 & 1 = MSW[1]
xor r6 r4	// r6 = r6 ^ r4 = ^MSW[1:0] ^ ^LSW[7:0] ^ p8 ^ p4 ^ p2 ^ p1

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r4 r3	// r4 = r4 + r3 = 0 + r3 = r3 = MSW
srl r4 r5	// r4 = r4 >> r1 = r4 >> 2 = MSW >> 2
and r4 r1	// r4 = r4 & 1 = MSW[2]
xor r6 r4	// r6 = r6 ^ r4 = ^MSW[2:0] ^ ^LSW[7:0] ^ p8 ^ p4 ^ p2 ^ p1 = p0

// Constructing LSW_out
xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
add r4 r1	// r4 = r4 + r1 = 30 + 1 = 31
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 31 = 0x3D =  &mem[61]
lb r5 r4	// r5 = mem[61] = p1
add r5 r5	// r5 = r5 + r5 = 2 * p1
add r6 r5	// r6 = r6 + r5 = { p1, p0 }

xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #1	// r7 = 2
add r4 r7	// r4 = r4 + r7 = 30 + 2 = 32
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 32 = 0x3E = &mem[62]
lb r5 r4	// r5 = mem[62] = p2
add r5 r5	// r5 = r5 + r5 = 2 * p2
add r5 r5	// r5 = r5 + r5 = 4 * p2
add r6 r5	// r6 = r6 + r5 = { p2, p1, p0 }

xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
and r4 r1	// r4 = r4 & 1 = LSW[0]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[0]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[0]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[0]
add r6 r4	// r6 = r6 + r4 = { LSW[0], p2, p1, p0 }

xor r4 r4	// r4 = r4 ^ r4 = 0
lut #9	// r7 = 30
add r4 r7	// r4 = r4 + r7 = 0 + 30 = 30
lut #2	// r7 = 4
add r4 r7	// r4 = r4 + r7 = 30 + 4 = 34
lut #9	// r7 = 0x1E = &mem[30]
add r4 r7	// r4 = r4 + r7 = 0x1E + 32 = 0x40 = &mem[64]
lb r5 r4	// r5 = mem[64] = p4
add r5 r5	// r5 = r5 + r5 = 2 * p4
add r5 r5	// r5 = r5 + r5 = 4 * p4
add r5 r5	// r5 = r5 + r5 = 8 * p4
add r5 r5	// r5 = r5 + r5 = 16 * p4
add r6 r5	// r6 = r6 + r5 = { p4, LSW[0], p2, p1, p0 }

xor r5 r5	// r5 = r5 ^ r5 = 0
xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 0 + 1 = 1
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 1 = LSW >> 1
and r4 r1	// r4 = r4 & 1 = LSW[1]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[1]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[1]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[1]
add r4 r4	// r4 = r4 + r4 = 16 * LSW[1]
add r4 r4	// r4 = r4 + r4 = 32 * LSW[1]
add r6 r4	// r4 = r6 + r4 = { LSW[1], p4, LSW[0], p2, p1, p0 }

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 1 + 1 = 2
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 2 = LSW >> 2
and r4 r1	// r4 = r4 & 1 = LSW[2]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[2]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[2]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[2]
add r4 r4	// r4 = r4 + r4 = 16 * LSW[2]
add r4 r4	// r4 = r4 + r4 = 32 * LSW[2]
add r4 r4	// r4 = r4 + r4 = 64 * LSW[2]
add r6 r4	// r4 = r6 + r4 = { LSW[2:1], p4, LSW[0], p2, p1, p0 }

xor r4 r4	// r4 = r4 ^ r4 = 0
add r5 r1	// r5 = r5 + r1 = 2 + 1 = 3
add r4 r2	// r4 = r4 + r2 = 0 + r2 = r2 = LSW
srl r4 r5	// r4 = r4 >> r5 = r4 >> 3 = LSW >> 3
and r4 r1	// r4 = r4 & 1 = LSW[3]
add r4 r4	// r4 = r4 + r4 = 2 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 4 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 8 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 16 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 32 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 64 * LSW[3]
add r4 r4	// r4 = r4 + r4 = 128 * LSW[3]
add r6 r4	// r4 = r6 + r4 = { LSW[3:1], p4, LSW[0], p2, p1, p0 } = LSW_out

// Storing LSW_out into mem[30 + count]
lut #9	// r7 = 0x1E = &mem[30]
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r0	// r4 = r4 + r0 = count
add r4 r7	// r4 = r4 + r7 = count + 0x1E = &mem[30 + count]
sb r6 r4	// mem[30 + count] = LSW_out

add r0 r1	// r0 = r0 + r1 = count + 1
add r0 r1	// r0 = r0 + r1 = count + 1 + 1 = count + 2

lut #9	// r7 = 30
xor r4 r4	// r4 = r4 ^ r4 = 0
add r4 r0	// r4 = r4 + r0 = 0 + count = count
xor r4 r7	// r4 = r4 ^ r7 = count ^ 30
lut #8	// r7 = 0
beq r4 r7	// If count ^ 30 != 0, jump to label LOOP (LUT[0])

DONE:		// Label DONE
lut #63	// Ack
